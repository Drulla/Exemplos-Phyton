class No():
    def __init__(self, val):
        self.val = val
        self.prox = None
class ListaLigada():
    
    def __init__(self):
        self.cabeca = None
        self.tamanho = 0
    
    def remover(self, valor):
        if(self.cabeca != None and self.cabeca.prox != None):
            aux = self.cabeca
            while(aux.prox != None):
                if(aux.prox.val == valor):
                    val = aux.prox.val
                    aux.prox = aux.prox.prox
                    self.tamanho -=1
                    return val
        
                aux = aux.prox
            return None
        elif(self.cabeca != None):
            valor = self.cabeca.val
            self.cabeca = None
            self.tamanho -=1
            return valor
        else:
            return None
    
    def inserir(self, valor):
        if(self.cabeca == None):
            self.cabeca = No(valor)
            self.tamanho+=1
        else:
            aux = self.cabeca
            
            while(aux.prox != None):
                aux = aux.prox
                
            aux.prox = No(valor)
            self.tamanho+=1
    def recuperar(self, index):
        if(index > self.tamanho):
            return None
        else:
            aux = self.cabeca
            i = 0
            while(i < index and aux.prox != None):
                aux = aux.prox
                i+=1
            return aux.val
    
    def contem(self, valor):
        aux = self.cabeca
        while(aux != None):
            if(aux.val == valor):
                return True
                
            aux = aux.prox
        
        return False
    
    def exibir(self):
        aux = self.cabeca
        
        while(aux != None):
            print(aux.val)
            aux = aux.prox
    
    def get_tamanho(self):
        return self.tamanho
class ConjuntoEspalhamento():
    def __init__(self):
        self.__tabela = ListaLigada()
        self.__tamanho = 0
        self.__chave = 26
        for i in range(0, self.__chave):
            self.__tabela.inserir(ListaLigada())
      
    def inserir(self, elemento):
        if (elemento == None or self.contem(elemento)):
          return False
        numero_espalhamento = self.gerar_numero_espalhamento(elemento)
        categoria = self.__tabela.recuperar(numero_espalhamento)
        categoria.inserir(elemento)
        self.__tamanho+=1
        return True
	
    def remover(self, elemento):
        numero_espalhamento = self.gerar_numero_espalhamento(elemento)
        categoria = self.__tabela.recuperar(numero_espalhamento)
        valor = categoria.remover(elemento)
        self.__tamanho-=1
        return valor
    def get_tamanho(self):
        return self.__tamanho
    def contem(self, elemento):
        numero_espalhamento = self.gerar_numero_espalhamento(elemento)
        categoria = self.__tabela.recuperar(numero_espalhamento)
        return categoria.contem(elemento)
    def gerar_numero_espalhamento(self, elemento):
		    return hash(elemento) % self.__chave
	
    def exibir(self):
        for i in range(0, self.__chave):
            self.__tabela.recuperar(i).exibir()
def processa_conjuto():
  
    t = int(input())
    pair_left = []
    pair_right = []
  
    for i in range(0,t):
        nomes = input().split(' ')
        pair_left.insert(i,nomes[0])
        pair_right.insert(i,nomes[1])
    conjunto = ConjuntoEspalhamento()
    for i in range(0,t):
        conjunto.inserir(pair_left[i] + "-" + pair_right[i])
        print(conjunto.get_tamanho())
if __name__ == "__main__":
    filtro = {k: v for k, v in vars().copy().items() if not re.search(r'\b__\w+__\b', k) }
    if not "ConjuntoEspalhamento" in filtro:
        print("É necessário declarar uma classe ConjuntoEspalhamento")
        quit()
    obj = ConjuntoEspalhamento()
    membro = [member for _name, member in inspect.getmembers(obj) if isinstance(member,ListaLigada)]
    if(len(membro) < 1):
        print("A classe deve implementar uma tabela de espalhamento com lista ligada")
    processa_conjuto()
